version: "3.7"
services:

    management-service:
      image: localhost:5000/management-service:latest
      build:
        context: .
        dockerfile: ./backend/src/Megarender.AppServices/Megarender.ManagementService/Dockerfile
      container_name: management-service
      restart: unless-stopped
      expose:
        - 80
      environment:
        DB_HOST: "db"
        DB_PORT: "5432"
        DB_USER_FILE: "~/secrets/API_DB_USER"
        DB_PWD_FILE: "~/secrets/API_DB_PASSWORD"
        PIS_HOST: "identity-service"
        PIS_PORT: "80"
        RMQ_USER_FILE: "~/secrets/RMQ_USER"
        RMQ_PWD_FILE: "~/secrets/RMQ_PASSWORD"
        RMQ_HOST: "rabbitmq"
        RMQ_PORT: "5672"
        ASPNETCORE_ENVIRONMENT: "Development"
        SeqURL: "http://seq:5341"
        PIS_HOST_EXT: "localhost"
        PIS_PORT_EXT: "5000"
        REDIS_HOST: "redis"
        REDIS_PORT: "6379"
      networks:
        - megarender
      depends_on:
        -  identity-service
        -  redis
        -  rabbitmq
        -  seq

    identity-service:
      image: localhost:5000/identity-service:latest
      build:
        context: .
        dockerfile: ./backend/src/Megarender.AppServices/Megarender.IdentityService/Dockerfile
      container_name: identity-service
      restart: unless-stopped
      expose:
        - 80
      environment:
        DB_HOST: "db"
        DB_PORT: "5432"
        DB_USER_FILE: "~/secrets/IS_DB_USER"
        DB_PWD_FILE: "~/secrets/IS_DB_PASSWORD"
        RMQ_USER_FILE: "~/secrets/RMQ_USER"
        RMQ_PWD_FILE: "~/secrets/RMQ_PASSWORD"
        RMQ_HOST: "rabbitmq"
        RMQ_PORT: "5672"
        ASPNETCORE_ENVIRONMENT: "Development"
        Serilog__WriteTo__2__Args__serverUrl: "http://seq:5341"
      networks:
        - megarender
      depends_on:
        db:
          condition: service_healthy


    storage-service:
      image: localhost:5000/storage-service:latest
      build:
        context: .
        dockerfile: ./backend/src/Megarender.AppServices/Megarender.StorageService/Dockerfile
      container_name: storage-service
      restart: unless-stopped
      expose:
        - 80
      environment:
        DB_HOST: "db"
        DB_PORT: "5432"
        DB_USER_FILE: "~/secrets/STORAGE_DB_USER"
        DB_PWD_FILE: "~/secrets/STORAGE_DB_PASSWORD"
        ASPNETCORE_ENVIRONMENT: "Development"
        SeqURL: "http://seq:5341"
        AZURE_STORAGE: "~/secrets/AZURE_STORAGE_CONNECTIONSTRING"
        PIS_HOST_EXT: "localhost"
        PIS_PORT_EXT: "5000"
        PIS_HOST: "identity-service"
        PIS_PORT: "80"
      depends_on:
        -  identity-service
      networks:
        - megarender


    db:
      image: localhost:5000/db:latest
      hostname: db
      build:
        context: .
        dockerfile: ./third-party-images/DB
      volumes:
        - pg_data:/var/lib/postgresql/data
      ports:
        - 6432:5432
      healthcheck:
        test: [ "CMD-SHELL", "pg_isready -U postgres" ]
        interval: 10s
        timeout: 5s
        retries: 5
      container_name: db
      restart: unless-stopped
      environment:
        PGDATA: "/var/lib/postgresql/data/pgdata"
        POSTGRES_PASSWORD_FILE: "~/secrets/DB_PASSWORD"
        POSTGRES_USER_FILE: "~/secrets/DB_USER"
      networks:
        - megarender

    pgadmin:
      restart: always
      image: dpage/pgadmin4
      container_name: pgadmin
      environment:
        PGADMIN_DEFAULT_EMAIL: "pg@admin.ru"
        PGADMIN_DEFAULT_PASSWORD: "TestPassw0rd!"
      # depends_on:
      #   db:
      #     condition: service_healthy
      ports:
        - 8001:80
      volumes:
        - pgadmin_data:/var/lib/pgadmin
      networks:
        - megarender


    rabbitmq:
      build:
        context: .
        dockerfile: ./third-party-images/RabbitMQ
      container_name: rabbitmq
      restart: unless-stopped
      environment:
        RABBITMQ_DEFAULT_USER_FILE: "~/secrets/RMQ_USER"
        RABBITMQ_DEFAULT_PASS_FILE: "~/secrets/RMQ_PASSWORD"
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:15672"]
        interval: 30s
        timeout: 10s
        retries: 5
      volumes:
          - rmq_etc:/etc/rabbitmq/
          - rmq_data:/var/lib/rabbitmq/
          - rmq_logs:/var/log/rabbitmq/
      expose:
        - 4369
        - 5671
        - 5672
        - 25672
        - 15671
      ports:
          - 15672:15672
          - 5672:5672
      networks:
        - megarender


    notification-worker:
      build:
        context: .
        dockerfile: ./backend/src/Megarender.AppServices/Megarender.WorkerServices/Megarender.NotificationWorkerService/Dockerfile
      container_name: notification-worker
      restart: unless-stopped
      environment:
        RMQ_USER_FILE: "~/secrets/RMQ_USER"
        RMQ_PWD_FILE: "~/secrets/RMQ_PASSWORD"
        RMQ_HOST: "rabbitmq"
        RMQ_PORT: "5672"
        DOTNET_ENVIRONMENT: "Production"
      networks:
        - megarender
      depends_on:
        rabbitmq:
          condition: service_healthy


    sms-worker:
      build:
        context: .
        dockerfile: ./backend/src/Megarender.AppServices/Megarender.WorkerServices/Megarender.SMSWorkerService/Dockerfile
      container_name: sms-worker
      restart: unless-stopped
      environment:
        RMQ_USER_FILE: "~/secrets/RMQ_USER"
        RMQ_PWD_FILE: "~/secrets/RMQ_PASSWORD"
        RMQ_HOST: "rabbitmq"
        RMQ_PORT: "5672"
        DOTNET_ENVIRONMENT: "Production"
        TOKEN_FILE: "~/secrets/TWILLIO_TOKEN"
        ACCOUNTSID_FILE: "~/secrets/TWILLIO_ACCOUNTSID"
        SENDER: "201-885-7365"
      networks:
        - megarender
      depends_on:
        rabbitmq:
          condition: service_healthy


    telegram-worker:
      build:
        context: .
        dockerfile: ./backend/src/Megarender.AppServices/Megarender.WorkerServices/Megarender.TelegramWorkerService/Dockerfile
      container_name: telegram-worker
      restart: unless-stopped
      environment:
        RMQ_USER_FILE: "~/secrets/RMQ_USER"
        RMQ_PWD_FILE: "~/secrets/RMQ_PASSWORD"
        RMQ_HOST: "rabbitmq"
        RMQ_PORT: "5672"
        DOTNET_ENVIRONMENT: "Production"
        TG_TOKEN_FILE: "~/secrets/TELEGRAM_TOKEN"
        WEBHOOK_URI: "https://009f8b2d875e.ngrok.io"
      networks:
        - megarender
      depends_on:
        rabbitmq:
          condition: service_healthy


    seq:
     image: datalust/seq
     container_name: seq
     restart: unless-stopped
     expose:
      - 5341
     ports:
      - 5340:80
     environment:
      ACCEPT_EULA: Y
     volumes:
      - seq_data:/data


    prometheus:
      image: prom/prometheus
      container_name: prometheus
      restart: unless-stopped
      ports:
        - 9090:9090
      volumes:
        - ./third-party-images/prometheus.yml:/etc/prometheus/prometheus.yml:ro


    grafana:
      image: grafana/grafana
      environment:
        GF_SECURITY_ADMIN_PASSWORD: "~/secrets/GRAFANA_PASSWORD"
      container_name: grafana
      restart: unless-stopped
      ports:
        - 3000:3000
      volumes:
        - grafana-storage:/var/lib/grafana grafana/grafana

    redis:
      image: redis:6.2.1-alpine
      container_name: redis
      ports:
        - 6379:6379
      environment:
        - REDIS_REPLICATION_MODE=master
      networks:
        - megarender


    portal:
      image: localhost:5000/portal:latest
      build:
        context: .
        dockerfile: ./clients/portal/Dockerfile
      container_name: portal
      restart: unless-stopped
      environment:
        API_URI: "http://localhost:8000/api"
      depends_on:
        - identity-nginx
        - management-nginx
        - storage-nginx
      networks:
        - megarender

    management-nginx:
      build:
        context: .
        dockerfile: ./backend/src/Megarender.AppServices/Megarender.ManagementService/nginx/Dockerfile
      container_name: management-nginx
      restart: unless-stopped
      depends_on:
        - management-service
      networks:
        - megarender


    identity-nginx:
      build:
        context: .
        dockerfile: ./backend/src/Megarender.AppServices/Megarender.IdentityService/nginx/Dockerfile
      container_name: identity-nginx
      restart: unless-stopped
      depends_on:
        - identity-service
      networks:
        - megarender

    storage-nginx:
      build:
        context: .
        dockerfile: ./backend/src/Megarender.AppServices/Megarender.StorageService/nginx/Dockerfile
      container_name: storage-nginx
      restart: unless-stopped
      depends_on:
        - storage-service
      networks:
        - megarender

    doc-portal:
      build:
        context: .
        dockerfile: ./clients/doc-portal/Dockerfile
      container_name: doc-portal
      restart: unless-stopped
      environment:
        API_URI: "http://localhost:8000/api"
      depends_on:
        - identity-nginx
        - management-nginx
        - storage-nginx
      networks:
        - megarender

    reverse-proxy:
      build:
        context: .
        dockerfile: ./third-party-images/reverse-proxy/Dockerfile
      container_name: reverse-proxy
      restart: unless-stopped
      ports:
        - 8000:8989
      depends_on:
        - identity-nginx
        - management-nginx
        - storage-nginx
        - portal
        - doc-portal
      networks:
        - megarender

networks:
  megarender:
    driver: bridge


volumes:
  pg_data:
  pgadmin_data:
  rmq_etc:
  rmq_data:
  rmq_logs:
  seq_data:
  grafana-storage:


